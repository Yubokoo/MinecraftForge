--- a/net/minecraft/world/level/block/Block.java
+++ b/net/minecraft/world/level/block/Block.java
@@ -60,11 +_,12 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 import org.slf4j.Logger;
 
-public class Block extends BlockBehaviour implements ItemLike {
+public class Block extends BlockBehaviour implements ItemLike, net.minecraftforge.common.extensions.IForgeBlock {
     public static final MapCodec<Block> CODEC = simpleCodec(Block::new);
     private static final Logger LOGGER = LogUtils.getLogger();
     private final Holder.Reference<Block> builtInRegistryHolder = BuiltInRegistries.BLOCK.createIntrusiveHolder(this);
-    public static final IdMapper<BlockState> BLOCK_STATE_REGISTRY = new IdMapper<>();
+    @Deprecated //Forge: Do not use, use GameRegistry
+    public static final IdMapper<BlockState> BLOCK_STATE_REGISTRY = net.minecraftforge.registries.GameData.BlockCallbacks.getBlockStateIDMap();
     private static final LoadingCache<VoxelShape, Boolean> SHAPE_FULL_BLOCK_CACHE = CacheBuilder.newBuilder()
         .maximumSize(512L)
         .weakKeys()
@@ -186,6 +_,7 @@
                 LOGGER.error("Block classes should end with Block and {} doesn't.", s);
             }
         }
+        initClient();
     }
 
     public static boolean isExceptionForConnection(BlockState p_152464_) {
@@ -198,12 +_,19 @@
             || p_152464_.is(BlockTags.SHULKER_BOXES);
     }
 
+    @Deprecated // FORGE: use shouldRenderFace with level and block pos instead
     public static boolean shouldRenderFace(BlockState p_152445_, BlockState p_362730_, Direction p_152448_) {
+        return shouldRenderFace(net.minecraft.world.level.EmptyBlockGetter.INSTANCE, BlockPos.ZERO, p_152445_, p_362730_, p_152448_);
+    }
+
+    public static boolean shouldRenderFace(BlockGetter level, BlockPos pos, BlockState p_152445_, BlockState p_362730_, Direction p_152448_) {
         VoxelShape voxelshape = p_362730_.getFaceOcclusionShape(p_152448_.getOpposite());
         if (voxelshape == Shapes.block()) {
             return false;
         } else if (p_152445_.skipRendering(p_362730_, p_152448_)) {
             return false;
+        } else if (p_152445_.supportsExternalFaceHiding() && p_362730_.hidesNeighborFace(level, pos.relative(p_152448_), p_152445_, p_152448_.getOpposite())) {
+            return false;
         } else if (voxelshape == Shapes.empty()) {
             return true;
         } else {
@@ -291,9 +_,13 @@
     public static void dropResources(
         BlockState p_49882_, Level p_49883_, BlockPos p_49884_, @Nullable BlockEntity p_49885_, @Nullable Entity p_49886_, ItemStack p_49887_
     ) {
+        dropResources(p_49882_, p_49883_, p_49884_, p_49885_, p_49886_, p_49887_, true);
+    }
+
+    public static void dropResources(BlockState p_49882_, Level p_49883_, BlockPos p_49884_, @Nullable BlockEntity p_49885_, @Nullable Entity p_49886_, ItemStack p_49887_, boolean dropXp) {
         if (p_49883_ instanceof ServerLevel) {
             getDrops(p_49882_, (ServerLevel)p_49883_, p_49884_, p_49885_, p_49886_, p_49887_).forEach(p_49944_ -> popResource(p_49883_, p_49884_, p_49944_));
-            p_49882_.spawnAfterBreak((ServerLevel)p_49883_, p_49884_, p_49887_, true);
+            p_49882_.spawnAfterBreak((ServerLevel)p_49883_, p_49884_, p_49887_, dropXp);
         }
     }
 
@@ -321,7 +_,7 @@
     }
 
     private static void popResource(Level p_152441_, Supplier<ItemEntity> p_152442_, ItemStack p_152443_) {
-        if (p_152441_ instanceof ServerLevel serverlevel && !p_152443_.isEmpty() && serverlevel.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS)) {
+        if (p_152441_ instanceof ServerLevel serverlevel && !p_152443_.isEmpty() && serverlevel.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS) && !p_152441_.restoringBlockSnapshots) {
             ItemEntity itementity = p_152442_.get();
             itementity.setDefaultPickUpDelay();
             p_152441_.addFreshEntity(itementity);
@@ -330,11 +_,12 @@
     }
 
     public void popExperience(ServerLevel p_49806_, BlockPos p_49807_, int p_49808_) {
-        if (p_49806_.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS)) {
+        if (p_49806_.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS) && !p_49806_.restoringBlockSnapshots) {
             ExperienceOrb.award(p_49806_, Vec3.atCenterOf(p_49807_), p_49808_);
         }
     }
 
+    @Deprecated //Forge: Use more sensitive version
     public float getExplosionResistance() {
         return this.explosionResistance;
     }
@@ -353,7 +_,8 @@
     public void playerDestroy(Level p_49827_, Player p_49828_, BlockPos p_49829_, BlockState p_49830_, @Nullable BlockEntity p_49831_, ItemStack p_49832_) {
         p_49828_.awardStat(Stats.BLOCK_MINED.get(this));
         p_49828_.causeFoodExhaustion(0.005F);
-        dropResources(p_49830_, p_49827_, p_49829_, p_49831_, p_49828_, p_49832_);
+        //Forge: Don't drop xp as part of the resources as it is handled by the patches in ServerPlayerGameMode#destroyBlock
+        dropResources(p_49830_, p_49827_, p_49829_, p_49831_, p_49828_, p_49832_, false);
     }
 
     public void setPlacedBy(Level p_49847_, BlockPos p_49848_, BlockState p_49849_, @Nullable LivingEntity p_49850_, ItemStack p_49851_) {
@@ -375,10 +_,12 @@
         p_49822_.setDeltaMovement(p_49822_.getDeltaMovement().multiply(1.0, 0.0, 1.0));
     }
 
+    /** @deprecated Forge use {@link IForgeBlock#getCloneItemStack(BlockState, HitResult, LevelReader, BlockPos, Player)}*/
     public ItemStack getCloneItemStack(LevelReader p_312699_, BlockPos p_49824_, BlockState p_49825_) {
         return new ItemStack(this);
     }
 
+    /** @deprecated Forge use {@link IForgeStateBlock#getFriction(Level, BlockPos, Entity)}*/
     public float getFriction() {
         return this.friction;
     }
@@ -449,7 +_,7 @@
             this.item = Item.byBlock(this);
         }
 
-        return this.item;
+        return net.minecraftforge.registries.ForgeRegistries.ITEMS.getDelegateOrThrow(this.item).get(); // Forge: Vanilla caches the items, update with registry replacements.
     }
 
     public boolean hasDynamicShape() {
@@ -501,5 +_,74 @@
         public int hashCode() {
             return System.identityHashCode(this.first) * 31 + System.identityHashCode(this.second);
         }
+    }
+
+    private Object renderProperties;
+
+    /**
+     *  DO NOT CALL, IT WILL DISAPPEAR IN THE FUTURE
+     *  Call RenderProperties.get instead
+     */
+    public Object getRenderPropertiesInternal() {
+        return renderProperties;
+    }
+
+    private void initClient() {
+        // Minecraft instance isn't available in datagen, so don't call initializeClient if in datagen
+        if (net.minecraftforge.fml.loading.FMLEnvironment.dist == net.minecraftforge.api.distmarker.Dist.CLIENT && !net.minecraftforge.fml.loading.FMLLoader.getLaunchHandler().isData()) {
+            initializeClient(properties -> {
+                if (properties == this) {
+                    throw new IllegalStateException("Don't extend IBlockRenderProperties in your block, use an anonymous class instead.");
+                }
+                this.renderProperties = properties;
+            });
+        }
+    }
+
+    public void initializeClient(java.util.function.Consumer<net.minecraftforge.client.extensions.common.IClientBlockExtensions> consumer) {
+    }
+
+    @Override
+    public boolean canSustainPlant(BlockState state, BlockGetter world, BlockPos pos, Direction facing, net.minecraftforge.common.IPlantable plantable) {
+        var plant = plantable.getPlant(world, pos.relative(facing));
+        var type = plantable.getPlantType(world, pos.relative(facing));
+
+        if (plant.getBlock() == Blocks.CACTUS) {
+            return state.is(Blocks.CACTUS) || state.is(BlockTags.SAND);
+        } else if (plant.getBlock() == Blocks.SUGAR_CANE && this == Blocks.SUGAR_CANE) {
+            return true;
+        } else if (plantable instanceof BushBlock bush && bush.mayPlaceOn(state, world, pos)) {
+            return true;
+        } else if (net.minecraftforge.common.PlantType.DESERT.equals(type)) {
+             return state.is(BlockTags.SAND) || this == Blocks.TERRACOTTA || this instanceof GlazedTerracottaBlock;
+        } else if (net.minecraftforge.common.PlantType.NETHER.equals(type)) {
+             return this == Blocks.SOUL_SAND;
+        } else if (net.minecraftforge.common.PlantType.CROP.equals(type)) {
+             return state.is(Blocks.FARMLAND);
+        } else if (net.minecraftforge.common.PlantType.CAVE.equals(type)) {
+             return state.isFaceSturdy(world, pos, Direction.UP);
+        } else if (net.minecraftforge.common.PlantType.PLAINS.equals(type)) {
+             return state.is(BlockTags.DIRT) || this == Blocks.FARMLAND;
+        } else if (net.minecraftforge.common.PlantType.WATER.equals(type)) {
+             return (state.is(Blocks.WATER) || state.getBlock() instanceof IceBlock) && world.getFluidState(pos.relative(facing)).isEmpty();
+        } else if (net.minecraftforge.common.PlantType.BEACH.equals(type)) {
+             boolean isBeach = state.is(BlockTags.DIRT) || state.is(BlockTags.SAND);
+             boolean hasWater = false;
+             for (Direction face : Direction.Plane.HORIZONTAL) {
+                 BlockState adjacentBlockState = world.getBlockState(pos.relative(face));
+                 var adjacentFluidState = world.getFluidState(pos.relative(face));
+                 hasWater = hasWater || adjacentBlockState.is(Blocks.FROSTED_ICE) || adjacentFluidState.is(net.minecraft.tags.FluidTags.WATER);
+                 if (hasWater) {
+                    break; //No point continuing.
+                 }
+             }
+             return isBeach && hasWater;
+        }
+        return false;
+    }
+
+    @SuppressWarnings("deprecation")
+    public SoundType getSoundType(BlockState state, LevelReader level, BlockPos pos, @Nullable Entity entity) {
+        return getSoundType(state);
     }
 }
