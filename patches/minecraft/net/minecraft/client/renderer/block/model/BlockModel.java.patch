--- a/net/minecraft/client/renderer/block/model/BlockModel.java
+++ b/net/minecraft/client/renderer/block/model/BlockModel.java
@@ -72,9 +_,10 @@
     public BlockModel parent;
     @Nullable
     protected ResourceLocation parentLocation;
+    public final net.minecraftforge.client.model.geometry.BlockGeometryBakingContext customData = new net.minecraftforge.client.model.geometry.BlockGeometryBakingContext(this);
 
     public static BlockModel fromStream(Reader p_111462_) {
-        return GsonHelper.fromJson(GSON, p_111462_, BlockModel.class);
+        return GsonHelper.fromJson(net.minecraftforge.client.model.ExtendedBlockModelDeserializer.INSTANCE, p_111462_, BlockModel.class);
     }
 
     public BlockModel(
@@ -95,10 +_,17 @@
         this.overrides = p_273099_;
     }
 
+    @Deprecated
     public List<BlockElement> getElements() {
+        if (customData.hasCustomGeometry()) return java.util.Collections.emptyList();
         return this.elements.isEmpty() && this.parent != null ? this.parent.getElements() : this.elements;
     }
 
+    @Nullable
+    public ResourceLocation getParentLocation() {
+        return parentLocation;
+    }
+
     public boolean hasAmbientOcclusion() {
         if (this.hasAmbientOcclusion != null) {
             return this.hasAmbientOcclusion;
@@ -130,12 +_,18 @@
                 throw new IllegalStateException("BlockModel parent has to be a block model.");
             }
 
+            if (customData.hasCustomGeometry()) {
+                customData.getCustomGeometry().resolveDependencies(p_365651_, customData);
+            }
+
             this.parent = blockmodel;
         }
     }
 
     @Override
     public BakedModel bake(ModelBaker p_252120_, Function<Material, TextureAtlasSprite> p_250023_, ModelState p_251130_) {
+        if (this.customData.getCustomGeometry() != null)
+            return this.customData.getCustomGeometry().bake(customData, p_252120_, p_250023_, p_251130_);
         return this.bake(p_250023_, p_251130_, true);
     }
 
@@ -229,7 +_,18 @@
         ItemTransform itemtransform5 = this.getTransform(ItemDisplayContext.GUI);
         ItemTransform itemtransform6 = this.getTransform(ItemDisplayContext.GROUND);
         ItemTransform itemtransform7 = this.getTransform(ItemDisplayContext.FIXED);
-        return new ItemTransforms(itemtransform, itemtransform1, itemtransform2, itemtransform3, itemtransform4, itemtransform5, itemtransform6, itemtransform7);
+
+        var builder = com.google.common.collect.ImmutableMap.<ItemDisplayContext, ItemTransform>builder();
+        for (ItemDisplayContext type : ItemDisplayContext.values()) {
+           if (type.isModded()) {
+              var transform = this.getTransform(type);
+              if (transform != ItemTransform.NO_TRANSFORM) {
+                 builder.put(type, transform);
+              }
+           }
+        }
+
+        return new ItemTransforms(itemtransform, itemtransform1, itemtransform2, itemtransform3, itemtransform4, itemtransform5, itemtransform6, itemtransform7, builder.build());
     }
 
     private ItemTransform getTransform(ItemDisplayContext p_270662_) {
@@ -347,6 +_,10 @@
 
         public boolean lightLikeBlock() {
             return this == SIDE;
+        }
+
+        public String getSerializedName() {
+            return name;
         }
     }
 }
